@page "/"
@using System.Net.Http.Json
@using TamboliyaLibrary.DAL
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;

<div style="margin: auto; width: 990px; height:500px;background-image: url(@(NavManager.Uri + pathToImage));" id="baseImage"></div>

<PageTitle>Нова гра</PageTitle>


<div class="alert alert-warning" role="alert">
    <input type="text" @bind-value="question" />
    <button type="button" class="btn btn-success" onclick="@(async () => await CreateNewGame())">Start new game</button>

</div>

@if (GameId > 0)
{
    <LogOfGame GameId="GameId" />
}





@code {
    public int? GameId { get; set; }
    private string question;
    private string pathToImage = "images/Oracul.jpg";

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await base.OnAfterRenderAsync(firstRender);
    }


    public async Task CreateNewGame()
    {
        if (!String.IsNullOrEmpty(question))
        {
            var gameOracle = await Http.GetFromJsonAsync<OracleDTO>($"api/Game/new?question={question}");
            GameId = gameOracle!.GameId;
            pathToImage = gameOracle!.PathToImage;
            if (pathToImage != null)
            {
                await MoveFigure(new GamePosition(gameOracle.Coordinates.x - 15, gameOracle.Coordinates.y - 29, pathToImage));
            }
        }
    }

    public async Task MoveFigure(object newPosition)
    {
        await JSRuntime.InvokeVoidAsync("moveFigure", new
        {
            x = ((GamePosition)newPosition).x,
            y = ((GamePosition)newPosition).y
        });
    }
}

