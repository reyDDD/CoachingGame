@page "/newGame"
@page "/newGame/{GameId:int}"
@using System.Net.Http.Json
@using TamboliyaLibrary.DAL
@using TamboliyaLibrary.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;
@inject IHttpClientFactory ClientFactory
@inject IAuthService AuthService

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "User")]

<div style="margin: auto;width: 990px; height:500px;background-image: url(@(pathToImage));" id="baseImage"></div>

<PageTitle>Нова гра</PageTitle>

<div class="">
    @if (GameId > 0)
    {
        if (gameFinished)
        {
            ChangeGameOutMessage("Гру закінчено!");
        }
        else if (RegionOnMap == RegionOnMap.LandOfClarity && ActualPositionsForSelect.Count() == 3)
        {
            Task.FromResult(MoveFigure(new GamePosition(790 - 14, 250 - 29, pathToImage)));
            <select @onchange="GoToNewPositionWhatImDoingHere">
                <option value="Select">Select...</option>
                @foreach (var item in ActualPositionsForSelect)
                {
                    <option value="@item.PositionNumber">@((LandOfClarity)item.PositionNumber)</option>
                }
            </select>
            <button type="button" class="btn btn-sm btn-info" onclick="@(async () => await EndTheGame())">End The Game</button>
        }
        else if (RegionOnMap == RegionOnMap.LandOfClarity && PositionNumber == 18)
        {
            ChangeGameOutMessage("Вітаю. Гру закінчено!");
        }
        else if ((RegionOnMap == RegionOnMap.LandOfClarity || RegionOnMap == RegionOnMap.Embodiment ||
        PositionNumber == 12) && !gameFinished)
        {
            <button type="button" class="btn btn-sm btn-danger" onclick="@(async () => await GoToNewPosition())">Go to new position</button>
            <button type="button" class="btn btn-sm btn-info" onclick="@(async () => await EndTheGame())">End The Game</button>
        }
        else if (RegionOnMap == RegionOnMap.LandOfClarity)
        {
            <button type="button" class="btn btn-sm btn-danger" onclick="@(async () => await GoToNewPosition())">Go to new position</button>
            <button type="button" class="btn btn-sm btn-info" onclick="@(async () => await EndTheGame())">End The Game</button>
        }
        else if (!gameFinished)
        {
            <button type="button" class="btn btn-sm btn-success" onclick="@(async () => await RollDice())">Roll the dice</button>
            <button type="button" class="btn btn-sm btn-danger" onclick="@(async () => await GoToNewPosition())">Go to new position</button>
            <button type="button" class="btn btn-sm btn-info" onclick="@(async () => await EndTheGame())">End The Game</button>
        }
        <p>@messageForEndGame</p>
    }
@*    else if (GameId == null)
    {
        <input type="text" @bind-value="question" />
        <button type="button" class="btn btn-sm btn-success" onclick="@(async () => await CreateNewGame())">Start new game</button>
    }*@
</div>

@if (GameId > 0)
{
    @if (logLines == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div style="display:flex;">
            <div style="width:50%; max-height:600px; overflow-y:scroll;">
                <Chat RoomName="@GameId.Value" GameFinished="gameFinished" @ref="@chat" />
            </div>
            <div style="width:50%; display:flex; max-height:600px; overflow-y:scroll;">
                <table class="table">
                    <tbody>
                        @foreach (var line in logLines?.Messages!)
                        {
                            <tr>
                                <td>@line</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}





@code {
    [ParameterAttribute] public int? GameId { get; set; }
    private string messageForEndGame = String.Empty;
    public bool gameFinished = false;
    private string? question = null;
    private string pathToImage = "images/Oracul.jpg";
    private GameLogDTO? logLines;
    private RegionOnMap RegionOnMap { get; set; }
    private int? PositionNumber { get; set; }
    private List<ActualPositionOnMap> ActualPositionsForSelect { get; set; } = new();
    public int SelectedIdForNextStepToEmbodiment { get; set; }
    private Chat? chat = new();
    private bool _disposed = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await AuthService.GetHttpClientToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);

        if (GameId.HasValue && GameId > 0)
        {
            gameFinished = await GetGameStatus();
            await GetInfoAboutExistGame();
            await GetLog();
        }

        await base.OnInitializedAsync();
    }

    private async Task GetInfoAboutExistGame()
    {
        GameDTO? game = null;
        try
        {
            game = await Http.GetFromJsonAsync<GameDTO>($"api/Game/info?gameId={GameId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        pathToImage = game!.PathToImage;
        RegionOnMap = game!.ActualPosition!.RegionOnMap;
        PositionNumber = game!.ActualPosition!.PositionNumber;

        if (pathToImage != null)
        {
            var newGameposition = new GamePosition(game.Coordinates.x, game.Coordinates.y, pathToImage);
            await MoveFigure(newGameposition);
        }
    }

    private async Task<bool> GetGameStatus()
    {
        try
        {
            return await Http.GetFromJsonAsync<bool>($"api/Game/status/{GameId}");
        }
        catch (Exception ex)
        {
            throw new OperationCanceledException(ex.Message);
        }
    }

    private async Task RollDice()
    {
        var model = new MoveModel()
            {
                GameId = GameId!.Value,
                ActionType = ActionType.RandomAction
            };
        var response = await Http.PostAsJsonAsync<MoveModel>($"api/Game/move", model);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GameDTO>();

            RegionOnMap = result!.ActualPosition!.RegionOnMap;
            PositionNumber = result!.ActualPosition!.PositionNumber;
            ActualPositionsForSelect = result!.ActualPositionsForSelect;
            pathToImage = result!.PathToImage;
            if (result!.IsFinished || (RegionOnMap == RegionOnMap.LandOfClarity && PositionNumber == 18))
            {
                gameFinished = true;
                ChangeGameOutMessage("Гру закінчено!");
            }
            await MoveFigure(new GamePosition(result.Coordinates.x, result.Coordinates.y, pathToImage));
            await GetLog();
        }
        else
        {
            ChangeGameOutMessage("Помилка при виконанні команди");
        }
    }

    private async Task GoToNewPositionWhatImDoingHere(ChangeEventArgs e)
    {
        SelectedIdForNextStepToEmbodiment = Convert.ToInt32(e.Value);
        MoveModel model = new MoveModel()
            {
                GameId = GameId!.Value,
                ActionType = ActionType.GoToSelectPosition,
                RegionOnMap = RegionOnMap.LandOfClarity,
                PositionNumber = SelectedIdForNextStepToEmbodiment
            };
        SelectedIdForNextStepToEmbodiment = 0;
        ActualPositionsForSelect = new();

        HttpResponseMessage response = await Http.PostAsJsonAsync<MoveModel>($"api/Game/move", model);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GameDTO>();

            RegionOnMap = result!.ActualPosition!.RegionOnMap;
            PositionNumber = result!.ActualPosition!.PositionNumber;
            ActualPositionsForSelect = result!.ActualPositionsForSelect;
            pathToImage = result!.PathToImage;
            if (result!.IsFinished)
            {
                gameFinished = true;
                ChangeGameOutMessage("Гру закінчено!");
            }
            await MoveFigure(new GamePosition(result.Coordinates.x, result.Coordinates.y, pathToImage));
            await GetLog();
        }
    }

    private async Task GoToNewPosition()
    {
        MoveModel model = new MoveModel()
            {
                GameId = GameId!.Value,
                ActionType = ActionType.NewStep
            };

        HttpResponseMessage response = await Http.PostAsJsonAsync<MoveModel>($"api/Game/move", model);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GameDTO>();

            RegionOnMap = result!.ActualPosition!.RegionOnMap;
            PositionNumber = result!.ActualPosition!.PositionNumber;
            ActualPositionsForSelect = result!.ActualPositionsForSelect;
            pathToImage = result!.PathToImage;
            if (result!.IsFinished || (RegionOnMap == RegionOnMap.LandOfClarity && PositionNumber == 18))
            {
                gameFinished = true;
                ChangeGameOutMessage("Гру закінчено!");
            }
            await MoveFigure(new GamePosition(result.Coordinates.x, result.Coordinates.y, pathToImage));
            await GetLog();
        }
        else
        {
            ChangeGameOutMessage("Помилка при виконанні команди");
        }
    }


    private async Task MoveFigure(object newPosition)
    {
        await JSRuntime.InvokeVoidAsync("moveFigure", new
        {
            x = ((GamePosition)newPosition).x,
            y = ((GamePosition)newPosition).y
        });
    }


    private async Task GetLog()
    {
        if (GameId.HasValue && GameId > 0)
        {
            logLines = await Http.GetFromJsonAsync<GameLogDTO>($"api/Game/log/{GameId}") ?? new();
        }
    }

    private async Task EndTheGame()
    {
        var response = await Http.PostAsJsonAsync<int>($"api/Game/finish", GameId!.Value);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<string>();
            ChangeGameOutMessage(result!);
            gameFinished = true;
        }
        await GetLog();
    }

    private void ChangeGameOutMessage(string message)
    {
        messageForEndGame = message;
    }
}

