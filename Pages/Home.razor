@page "/"
@using System.Globalization
@inject IAuthService AuthService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "User")]
<h3>Home</h3>

<p class="@(messageForEndGame == String.Empty ? "" : "alert alert-danger")">@messageForEndGame</p>

<EditForm Model="@newGame" OnValidSubmit="@(async () => await JoinOrCreateNewGame())"
          Context="formContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="@newGame.Question">
        Ваше питання для гри
        <InputText id="question" @bind-Value="@newGame.Question" />
    </label>

    @if (newGame.GameType != GameType.Child)
    {
        <label for="@newGame.MaxUsersCount">
            Максимальна кількість гравців
            <InputNumber id="maxUsersCount" @bind-Value="@newGame.MaxUsersCount" />
        </label>
    }
    else
    {
        newGame.MaxUsersCount = 0;
    }
    @if (childGamesExist)
    {
        <label for="@newGame.GameType">
            Створити нову гру чи приєднатися до існуючої
            <InputRadioGroup Name="gameType" ValueChanged="@((e) => SelectGameType(e))" TValue="GameType" ValueExpression="() => newGame.GameType">
                <InputRadio Name="gameType" Value="@GameType.Parrent" />
                <InputRadio Name="gameType" Value="@GameType.Child" />
            </InputRadioGroup>
        </label>
    }
    @if (!newGame.ParentGame.HasValue)
    {
        <label for="@newGame.DateBeginning">
            Дата початку гри
            <InputDateTime Value="newGame.DateBeginning" ValueChanged="@(async (val) => await SetDateGameStarted(val))" TValue="DateTime" ValueExpression="() => newGame.DateBeginning" />
        </label>
        <label for="@newGame.DateEnding">
            Дата закінчення гри
            <InputDateTime Value="newGame.DateEnding" ValueChanged="@(async (val) => await SetDateGameEnded(val))" TValue="DateTime" ValueExpression="() => newGame.DateEnding" />
        </label>
    }
    <label>
        @if (newGame.GameType == GameType.Child)
        {
            <table class="table table-striped">
                <thead>
                    <tr class="text-center">
                        <th scope="col">Game Id</th>
                        <th scope="col">Will start</th>
                        <th scope="col">Will finish</th>
                        <th scope="col">Choice</th>
                    </tr>
                </thead>
                <tbody>
                    <InputRadioGroup Name="parentGame" @bind-Value="newGame.ParentGame">
                        @if (userGames != null)
                        {
                            foreach (var game in userGames)
                            {
                                <tr>
                                    <td>@game.GameId</td>
                                    <td class="text-center">@game.DateBeginning.DateTime</td>
                                    <td class="text-center">@game.DateEnding.DateTime</td>
                                    <td class="text-center">
                                        <InputRadio Name="parentGame" Value="@game.GameId" />
                                    </td>
                                </tr>
                            }
                        }
                    </InputRadioGroup>
                </tbody>
            </table>
        }
    </label>
    <button type="submit" class="btn btn-sm btn-success">Start new game</button>
</EditForm>





@code {
    private string messageForEndGame = String.Empty;
    private IEnumerable<GameDTO>? userGames;
    private bool childGamesExist = true;
    private NewUserGame newGame = new()
        {
            GameType = GameType.Parrent,
            DateBeginning = DateTime.Now.AddHours(1),
            DateEnding = DateTime.Now.AddHours(4)
        };


    protected override async Task OnInitializedAsync()
    {
        var offset = await JS.InvokeAsync<int>("getAppTimeZone");
        newGame.TimeOffset = offset;

        var token = await AuthService.GetHttpClientToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        try
        {
            await GetListLastGamesToJoin();
        }
        catch (Exception ex)
        {
            //TODO запис в лог, а не на консоль
            Console.WriteLine("Request to get user's games list has been empty or request give back not success status code");
            userGames = new List<GameDTO>();
        }
        finally
        {
            if (userGames?.Count() == 0)
            {
                childGamesExist = false;
                newGame.GameType = GameType.Parrent;
                StateHasChanged();
            }
        }

        await base.OnInitializedAsync();
    }

    private async Task JoinOrCreateNewGame()
    {
        ChangeGameOutMessage("");

        if (newGame.GameType == GameType.Parrent)
        {
            newGame.ParentGame = null;
        }
        else if (newGame.GameType == GameType.Child)
        {
            var selectGame = userGames?.FirstOrDefault(x => x.GameId == newGame.ParentGame);
            if (selectGame != null && selectGame != default(GameDTO))
            {
                newGame.DateBeginning = selectGame!.DateBeginning.UtcDateTime;
                newGame.DateEnding = selectGame!.DateEnding.UtcDateTime;
            }
        }
        else if (newGame.GameType == GameType.NotSet)
        {
            ChangeGameOutMessage("Game Type don't selected");
            return;
        }

        OracleDTO? oracle = default;
        try
        {
            var response = await Http.PostAsJsonAsync<NewUserGame>($"api/Game/new", newGame);
            if (response.IsSuccessStatusCode)
            {
                oracle = await response.Content.ReadFromJsonAsync<OracleDTO>();
                NavManager.NavigateTo($"/newGame/{oracle!.GameId}");
            }
            else
            {
                //TODO: додати логування і виводити дані в лог, а не консоль
                var errorMessage = "Помилка при створенні нової гри";
                ChangeGameOutMessage(errorMessage);
                Console.WriteLine(await response.Content.ReadAsStringAsync());
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void SelectGameType(GameType gameType)
    {
        newGame.GameType = gameType;
        if (gameType == GameType.Parrent)
        {
            newGame.ParentGame = null;
        }
        StateHasChanged();
    }

    private void ChangeGameOutMessage(string message = "")
    {
        if (message == "")
            message = String.Empty;

        messageForEndGame = message;
    }

    private async Task SetDateGameStarted(DateTime dateStarted)
    {
        newGame.DateBeginning = dateStarted;
        newGame.DateEnding = newGame.DateBeginning.AddHours(3);
        ChangeGameOutMessage("End date of game has updated!");

        await GetListLastGamesToJoin();
    }

    private async Task SetDateGameEnded(DateTime dateEnded)
    {
        if (dateEnded.AddHours(3) >= newGame.DateBeginning)
        {
            newGame.DateEnding = dateEnded;

            await GetListLastGamesToJoin();
        }
        else
        {
            ChangeGameOutMessage("Selected end date of game not valid!");
        }

    }

    private async Task GetListLastGamesToJoin()
    {
        //TODO: працює дуже повільно!!!
        var startDate = newGame.DateBeginning.ToString(CultureInfo.InvariantCulture);
        var endDate = newGame.DateEnding.ToString(CultureInfo.InvariantCulture);
        userGames = await Http.GetFromJsonAsync<List<GameDTO>>(
            $"api/game/lastGamesToJoin?DateBeginning={startDate}&DateEnding={endDate}&Offset={newGame.TimeOffset}");
        
        if (userGames?.Count() > 0)
        {
            childGamesExist = true;
            StateHasChanged();
        }
    }
}
