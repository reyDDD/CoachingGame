@page "/history"
@inject IHttpClientFactory ClientFactory
@*@attribute [Authorize]*@
@inject ITokenService _tokenService;
@using Newtonsoft.Json;
@using IdentityModel;
@using IdentityModel.Client;


<PageTitle>Games history</PageTitle>

<h1>Games history</h1>

@if (userGames is null)
{
    <p>Loading...</p>
}
else if (userGames.Count() > 0)
{
    <table>
        @foreach (var game in userGames)
        {
            <tr>
                <td>@game.GameId</td>
                <td>@game.Created</td>
                <td>@(game.IsFinished == true ? "game is over" : "game is active")</td>
                <td></td>
            </tr>
        }
    </table>
}

@code {
    private IEnumerable<GameDTO>? userGames;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = new List<GameDTO>();
            var token = await _tokenService.GetToken("myApi.read");
            using (var client = new HttpClient())
            {
                client.SetBearerToken(token.AccessToken);
                var result = await client.GetAsync("https://localhost:7212/api/game/gamesInfo");
                if (result.IsSuccessStatusCode)
                {
                    var model = await result.Content.ReadAsStringAsync();
                    data = JsonConvert.DeserializeObject<List<GameDTO>>(model);
                    userGames = data;
                }
                else
                {
                    throw new Exception("Failed to get Data from API");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            userGames = new List<GameDTO>();
        }

    }
}
