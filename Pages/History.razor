@page "/history"
@inject IAuthService AuthService
@attribute [Authorize(Roles = "User")]
@using Newtonsoft.Json;
@using IdentityModel;
@using IdentityModel.Client;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Games history for user @(async() => await GetUserEmail())</PageTitle>

<h1>Games history</h1>

@if (userGames is null)
{
    <p>Loading...</p>
}
else if (userGames.Count() > 0)
{
    <table class="table table-striped">
        <thead>
            <tr class="text-center">
                <th scope="col">Game Id</th>
                <th scope="col">Created</th>
                <th scope="col">State</th>
                <th scope="col">Continue</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var game in userGames)
        {
            <tr>
                <td>@game.GameId</td>
                    <td class="text-center">@game.Created</td>
                    <td class="text-center">@(game.IsFinished == true ? "game is over" : "game is active")</td>
                    <td class="text-center"><a href="/newGame/@game.GameId">@(game.IsFinished == true ? "View game" : "Continue game")</a></td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    private IEnumerable<GameDTO>? userGames;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await AuthService.GetHttpClientToken();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            userGames = await Http.GetFromJsonAsync<List<GameDTO>>("api/game/gamesInfo");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            userGames = new List<GameDTO>();
        }

    }

    private async Task<string> GetUserEmail()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        return state.User?.Identity?.Name!;
    }
}
