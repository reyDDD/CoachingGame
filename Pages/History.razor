@page "/history"
@inject IAuthService AuthService
@attribute [Authorize(Roles = "User")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILoggerFactory LoggerFactory
@inject IGameRepository GameRepo

<PageTitle>Games history for user @(async () => await GetUserEmail())</PageTitle>

    <h1>Games history</h1>

    @if (userGames is null)
{
    <p>Loading...</p>
}
else if (userGames.Count() > 0)
{
    <table class="table table-striped">
        <thead>
            <tr class="text-center">
                <th scope="col">Game Id</th>
                <th scope="col">Created</th>
                <th scope="col">Parent or child</th>
                <th scope="col">State</th>
                <th scope="col">Continue</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in userGames)
            {
                <tr>
                    <td>@game.GameId</td>
                    <td class="text-center">@game.Created</td>
                    <td class="text-center">@game.GameType</td>
                    <td class="text-center">@(game.IsFinished == true ? "game is over" : "game is active")</td>
                    <td class="text-center"><a href="/newGame/@game.GameId">@(game.IsFinished == true ? "View game" : "Continue game")</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private ILogger<History> logger = null!;
    private IEnumerable<GameDTO>? userGames;

    protected override async Task OnInitializedAsync()
    {
        logger = LoggerFactory.CreateLogger<History>();
        try
        {
            userGames = await GameRepo.GetListGamesInfo();
        }
        catch (Exception ex)
        {
            logger.LogWarning(ex.Message);
            userGames = new List<GameDTO>();
        }
        await base.OnInitializedAsync();
    }

    private async Task<string> GetUserEmail()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        return state.User?.Identity?.Name!;
    }
}
