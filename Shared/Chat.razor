@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles ="User")]
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat component</PageTitle>

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" type="text" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private HashSet<string> messages = new HashSet<string>();
    private string? messageInput;
    private string? userMail;
    private int userId;

    [Parameter]
    public int RoomName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userMail = state.User.Identity?.Name;
        userId = 0;

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7212/chathub")
            .Build();

        hubConnection.On<int, string>("ReceiveMessage", (RoomName, message) =>
        {
            var encodedMsg = $"{message} to room #{RoomName}";
            messages.Add(encodedMsg);
            AddNewMessageToChatLog(encodedMsg).Wait();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await ConnectToRoom();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToGroup", RoomName, messageInput, userMail);
            messageInput = String.Empty;
        }
    }

    private async Task ConnectToRoom()
    {
        if (hubConnection is not null && RoomName != 0)
        {
           await hubConnection.SendAsync("JoinRoom", RoomName, userMail);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveRoom", RoomName, userMail);
            await hubConnection.DisposeAsync();
        }
    }



    //public async Task SaveBaseChatLog()
    //{
    //    LogsDTOModel model = new()
    //        {
    //            GameId = RoomName,
    //            UserId = userId
    //        };
    //    await Http.PostAsJsonAsync<LogsDTOModel>($"api/GameLog/save", model);
    //}

    public async Task AddNewMessageToChatLog(string message)
    {
        LogLineDTOModel model = new()
            {
                GameId = RoomName,
                UserId = userId,
                Message = message
            };
        await Http.PostAsJsonAsync<string>($"api/GameLog/addMessageToLog", message);
    }
}