@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@attribute [Authorize(Roles = "User")]
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json


<PageTitle>Chat component</PageTitle>
@if (!GameFinished)
{
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" type="text" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
}
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private HashSet<string> messages = new HashSet<string>();
    private string? messageInput;
    private string? userMail;
    private string? token = null;
    [Parameter]
    public int RoomName { get; set; }
    [Parameter]
    public bool GameFinished { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        token = await AuthService.GetHttpClientToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        var log = await Http.GetFromJsonAsync<LogsDTOModel>($"api/GameLog/info?GameId={RoomName}");
        if (log?.Messages.Count() > 0)
        {
            messages = log!.Messages;
        }

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userMail = state.User.Identity?.Name;

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7212/chathub")
            .Build();

        hubConnection.On<int, string>("ReceiveMessage", (RoomName, message) =>
        {
            OnMessageFromServer(RoomName, message);
            StateHasChanged();
        });


        await hubConnection.StartAsync();
        StateHasChanged();
        await ConnectToRoom();

        await base.OnInitializedAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToGroup", RoomName, messageInput, userMail);
            messageInput = String.Empty;
        }
    }

    private async Task ConnectToRoom()
    {
        if (hubConnection is not null && RoomName != 0)
        {
            await hubConnection.SendAsync("JoinRoom", RoomName, userMail);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveRoom", RoomName, userMail);
            await hubConnection.DisposeAsync();
        }
    }



    public async Task AddNewMessageToChatLog(string message)
    {
        LogLineDTOModel model = new()
            {
                GameId = RoomName,
                Message = message
            };
        await Http.PostAsJsonAsync<LogLineDTOModel>($"api/GameLog/addMessageToLog", model);

        messages = (await Http.GetFromJsonAsync<LogsDTOModel>($"api/GameLog/info?GameId={RoomName}"))!.Messages;
    }

    private void OnMessageFromServer(int roomName, string message)
    {
        Task.Run(async () =>
        {
            var encodedMsg = $"{message} to room #{RoomName}";
            messages.Add(encodedMsg);
            await AddNewMessageToChatLog(encodedMsg);
            StateHasChanged();
        });
    }
}